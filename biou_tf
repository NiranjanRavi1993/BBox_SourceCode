def compute_iou(box, boxes, box_area, boxes_area):  #DIOU
    """Calculates IoU of the given box with the array of the given boxes.
    box: 1D vector [y1, x1, y2, x2]
    boxes: [boxes_count, (y1, x1, y2, x2)]
    box_area: float. the area of 'box'
    boxes_area: array of length boxes_count.

    Note: the areas are passed in rather than calculated here for
    efficiency. Calculate once in the caller to avoid duplicate work.
    """
    # Calculate intersection areas
    y1 = np.maximum(box[0], boxes[:, 0])
    y2 = np.minimum(box[2], boxes[:, 2])
    x1 = np.maximum(box[1], boxes[:, 1])
    x2 = np.minimum(box[3], boxes[:, 3])
    intersection = np.maximum(x2 - x1, 0) * np.maximum(y2 - y1, 0)
    union = box_area + boxes_area[:] - intersection[:]
    
    cw = np.maximum(box[3], boxes[:, 3]) - np.minimum(box[1], boxes[:, 1])
    ch = np.maximum(box[2], boxes[:, 2]) - np.minimum(box[0], boxes[:, 0])
    
    c_area = cw * ch
    c2 = cw ** 2 + ch ** 2
    
    rho2 = ((boxes[:, 1] + boxes[:, 3]) - (box[1] + box[3])) ** 2 / 4 + ((boxes[:, 0] + boxes[:, 2]) - (box[0] + box[2])) ** 2 /4 
    
    iou = intersection / union
    
    
    box_1_center_x      = (box[1] + box[3])/2
    box_1_center_y      = (box[0] + box[2])/2 
    box_2_center_x      = (boxes[:, 1] + boxes[:, 3])/2 
    box_2_center_y      = (boxes[:, 0] + boxes[:, 2])/2
    distance_between_x_cord = (box_1_center_x - box_2_center_x) ** 2+ (box[0] - boxes[:, 0]) ** 2 + eps
    distance_between_y_cord = (box_1_center_y - box_2_center_y) ** 2+ (boxes[:, 1] - box[1]) ** 2 + eps
    distance_between_min_edges = (box[1] - boxes[:, 1]) ** 2+ (box[0] - boxes[:, 0]) ** 2 + eps
    distance_between_max_edges = (box[3] - boxes[:, 3]) ** 2+ (box[2] - boxes[:, 2]) ** 2 + eps
    
    h1 = box[2] - box[0]
    h2 = boxes[:, 2] - boxes[:, 0]
    
    w1 = box[3] - box[1]
    w2 = boxes[:, 3] - boxes[:, 1]
    
    
    lenfactor = h1/h2
    widfactor = w1/w2
    
    distance_between_x_cord = lenfactor * distance_between_x_cord
    distance_between_y_cord = widfactor * distance_between_y_cord
    
    p1 = distance_between_x_cord + distance_between_y_cord + distance_between_min_edges + distance_between_max_edges
    
    p2 = p1/c2
    
    
    return iou - (rho2 / c2)
